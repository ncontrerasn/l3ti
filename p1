%DMC

%limpiar pantalla y formato de los números
clc
format long

%recibir datos de entrada
printf("Datos de entrada\n\n");
printf("P(X)\n");

%pedir el número de elementos de P(x)
colpx = input('Número de elementos: ');
px = [];

#pedir cada uno de los elementos de p(x)
printf("Digite la probabilidad para cada elemento: \n");
for i = 1 : colpx
  printf("P(x_%i)",i);
  px(i) = input(" = ");
end

#mostrar P(X)
printf("\n El arreglo P(X) ingresado fue: ")
disp(px);

#construir P(Y|X)
printf("P(Y|X)\n")

#pedir el número de filas
rowpyx = input('Digite el número de filas: ');

#pedir el número de columnas
colpyx = input('Digite el número de columnas: ');
pyx = [];

#pedir cada uno de los elementos de P(Y|X)
printf("Digite la probabilidad para cada elemento: \n");
for i = 1 : rowpyx
  for j = 1 : colpyx
    printf("P(y_%i|x_%i)", j, i);
    pyx(i, j) = input(" = ");
  end 
end

#mostrar P(Y|X)
printf("\nLa matriz P(Y|X) ingresada fue: \n")
disp(pyx);

%Resultados
printf("\nResultados:\n")

#calcular la incertidumbre promedio de la entrada del canal como H(X) = -sum(1, m, P(x_i)log_2(P(x_i))
#hx acumula la sumatoria
hx = 0;

#hacer la sumatoria
for i = 1 : colpx           
  aux = px(i) * log2(px(i));
  hx += aux;
endfor

#multiplicar hx * -1
hx = hx * -1;

#mostrar H(X)
printf("H(X) = ");
disp(hx);
printf("\n");

#calcular probabilidad de salida P(Y) = P(X) P(Y|X)
if colpx == rowpyx               
  py = px * pyx;           
else
  #indicar del error en la multiplicación de matrices
  printf("Error, no se pudo calcular P(Y), dimensiones inválidas para P(X) y P(Y|X)\n");
  return
endif

#mostrar P(Y)
printf("P(Y) = ");
disp(py);
printf("\n");

#calcular la matriz de probabilidad conjunta P(X, Y)=diag(P(X))P(Y|X)
pxd = diag(px);
if colpx == rowpyx
  pxy = pxd * pyx;                 
else
  disp("Error, no se pudo calcular P(X, Y), dimensiones invalidas para P(X) y P(Y|X)\n");
  return
endif

#mostrar P(X,Y)
printf("P(X,Y) = \n");
disp(pxy);
printf("\n");

#calcular la entropía condicional H(Y|X) = -(sum(1, n, sum(1, m, P(xi, yi)log_2(P(yi|xi)))))
aux = 0;
hyx = 0;  
                                 
#validar que P(X,Y) y P(Y|X) tengan las mismas dimensiones
if rows(pxy) == rowpyx && columns(pxy) == colpyx  
        
  #solo en este caso se puede realizar la sumatoria
  for i = 1 : rowpyx
    for j = 1 : colpyx
      aux = pxy(i, j) * log2(pyx(i, j));
      hyx += aux;                            
    endfor
  endfor
  
  #multiplica hx * -1
  hyx = hyx * -1;
else
  #si no tienen las mismas dimnesiones hay error y termina el programa
  disp("Error, las matrices P(X, Y) y P(Y|X) tienen tamaños diferentes")
  return
endif

#Se muestra H(Y|X)
printf("H(Y|X) = \n");
disp(hyx);
printf("\n");

#calcular la incertidumbre promedio de la salida del canal H(Y) = -sum(1, n, P(y_i)log_2(P(y_i))
aux = 0;
hy = 0;

#hallar H(Y)
for i = 1 : rowpyx
  aux = py(i) * log2(py(i));
  hy += aux;
endfor

#multiplica hx * -1
hy = hy * -1;

#mostrar H(Y)
printf("H(Y) = ");
disp(hy);
printf("\n");

#calcular entropía conjunta H(X,Y) = -(sum(1, n, sum(1, m, P(xi, yi)log_2(P(yi|xi)))))
aux = 0;
hxy = 0;

#hacer la sumatoria doble            
for i = 1 : rows(pxy)
  for j = 1 : columns(pxy)
    aux = pxy(i, j) * log2(pxy(i, j));
    hxy += aux;
  endfor
endfor

#mutliplicar por -1
hxy = hxy * -1;

#mostrar H(X,Y)
printf("H(X,Y) = \n");
disp(hxy);
printf("\n");


#calcular la información mutua I(X;Y) = H(Y) - H(Y|X)
ixy = hy - hyx;

#mostrar I(X;Y)
printf("I(X;Y) = ");
disp(ixy);
printf("\n");

#revisar si la matriz P(Y|X) es BSC (binary symmetric channel) y si lo es calculamos cs
#una matriz es BSC si la matriz es cuadrada y ademas si [1,2] = [2,1] = p y [1,1] = [2,2] = 1-p
isBSC = false;
if rowpyx == 2 && colpyx == 2
  if pyx(1, 2) == pyx(2, 1) && pyx(1, 1) == pyx(2, 2) && pyx(2, 2) == 1 - pyx(1, 2)
    isBSC = true;
    p = pyx(1, 2);
    q = 1 - p;
    cs = 1 + p * log2(p) + q * log2(q);
  endif
endif

#mostrar el resultado si es BSC
if isBSC
  printf("P(Y|X) es BSC, el valor de Cs = ");
  disp(cs);
else
  printf("P(Y|X) NO es BSC\n");
endif
