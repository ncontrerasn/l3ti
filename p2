%Codificador de Huffman

%limpiar pantalla y formato de los números
clc
format short

%recibir símbolos del abacedario
printf("Por simplicidad, un símbolo con un nombre  de más de un carácter (como x1), se representa con una sola letra del abecedario.\n");
printf("Ingrese la cadena de símbolos: \n");
s = input("", "s");

#ingresar la probabilidad de cada símbolo
printf("Ingrese el valor de probabilidad para cada símbolo: \n");
p = [];
sumP = 0;

#tienen que sumar 1 todas las probabilidades
for i = 1 : length(s)
  printf("P(%c)", s(i));
  p(i) = input(" = ");
  sumP = sumP + p(i);
end
if (1 - abs(sumP) > ( 1 * 10^(-3)))
  printf("Error, las probabilidades tienen que sumar 1.\n");
  return
endif

#ordenar el arreglo de probabilidades desendentemente
#y modificar el orden de la cadena de símbolos según corresponda
for m = 1 : length(p)
	for n = 1 : length(p)
		if p(m) > p(n)
      
      #ordenar p
			a = p(n);
			p(n) = p(m);
      p(m) = a;
      
      #ordenar s
      c = s(n);
      s(n) = s(m);
      s(m) = c;
		end
	end
end

%algoritmo de Huffman
fprintf("\nCodificacion por carácter: \n\n");

%guardar los valores originales de p y s
origS = s;
origP = p;

#establecer una variable para el tamaño del código por ciclo y un arreglo que los almacene todos
tempSize = 0;
codeSize = [];

%empezar el proceso para encontrar el código de cada símbolo
for n = 1 : length(s)
  
  #guardar el carácter con el que estamos trabajando
	cAtn = s(n);
  
  #definir el arreglo "codigo" para mostrar el código resultante para cada carácter
  #inicializar el código vacío
	codigo = [''];
  
  #establecemos una variable para la longitud de p
  lenP = length(p);
	
  #mientras queden probabilidades con las que trabajar
	while lenP > 1				
				
    #sumar los últimos dos valores de probabilidad
		aux1 = p(lenP) + p(lenP - 1);
		aux2 = 0;
    
    #verificar si el carácter actual es igual al que se encuentra al final de la cadena
		if cAtn == s(length(s))
      
      #si es así, se concatena por la izquierda a su código un 1
			codigo = ['1', codigo];
      
      #como se involucró en la suma, se guarda su valor
			aux2 = cAtn;
      
      #incrementar la variable que registra el tamaño del código
      tempSize = tempSize + 1;
      
      #verificar si el carácter actual se encuentra penúltimo en la cadena
    elseif  cAtn == s(length(s) - 1)
      
      #si es así, se concatena por la izquierda a su código un 1
			codigo = ['0', codigo];
      
      #como se involucró en la suma, se guarda su valor
			aux2 = cAtn;
      
      #incrementar la variable que registra el tamaño del código
      tempSize = tempSize + 1;
		endif
		
    #generar un nuevo arreglo de probabilidades donde se eliminan los últimos 2 valores
    #y se remplazan por el valor de la suma calculada
		p = [p(1 : length(p) - 2), aux1];
    
    #se ordena descendentemente
		p = sort(p, 'descend');
    
    #actualizar la variable del tamaño de p
    lenP = length(p);
		
    #buscamor la posición donde quedó la probabilidad resultante de la suma
    #y se guarda en chP
		chP = 0;
		for temp = 1 : lenP
			if p(temp) == aux1;
				chP = temp;
			end
		end
		
    #generar un nuevo arreglo de símbolos sin las dos ultimas posiciones
		s = [s(1 : length(s) - 2)];
    
    #correr todas las posiciones después del número cambiado
		for i = length(s): -1 : chP
			s(i + 1) = s(i);
		end
    
    #en la posicion chP se coloca nuestro carácter cAtn si se incluye en la suma, en el caso que no se coloca 0
		s(chP) = aux2;
	end
  
  #se agrega el tamaño del código calculado al arreglo de tamaños
	codeSize = [codeSize, tempSize];
  tempSize = 0;
  
  #moestrar el código resultante
  fprintf("%c -> ", cAtn);
  disp(codigo);
  
  #restaurar los vectores a sus valores originales
	p = origP;
	s = origS;
end

%reporte de resultados
fprintf("\nResultados: \n\n");

#calcular la entropía H(X)
m = length(p);

#acumulador para la sumatoria
hx = 0;

#for de la sumatoria
for i = 1 : m
  aux = p(i) * log2(p(i));
  hx += aux;
endfor

#multiplicar hx * -1
hx = hx * -1;

#mostrar el resultado
printf("H(X) = ");
disp(hx);
printf(" b / símbolo\n\n");

#calcular la longitud de código promedio L
#n_i = longitud del codigo i
L = 0;
for i = 1 : m
  L = L + (p(i) * codeSize(i));
end

#mostrar el resultado
printf("L = ");
disp(L);
printf(" b / símbolo\n\n");

%calcular la eficiencia de codificacion eta
CE = hx / L;

#mostrar el resultado
printf("Eta = ");
disp(CE);
printf("\n");
